version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      
    steps:
      - run:
          name: Destroy Backend infrastructure
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run: 
          name: Destroy Frontend infrastructure
          when: on_fail
          command: aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Delete S3 files
          when: on_fail
          command: aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/WEmhbY71vVnM6sjoH9rE6w/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS == 1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migration:revert
              
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend unit test
          command: |
            cd frontend
            npm install
            npm run test                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backendend-build]
      - run:
          name: Backend unit test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      - run: 
          name: Scan for vulnerability
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [backend-build]
      - run:
          name: Scan for vulnerability at the backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >>.circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          # root: .circleci/ansible
          root: ~/ 
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.9.1-alpine3.12
      
    steps:
      - checkout
      # Adds ssh keys with fingerprint
      - add_ssh_keys:
              fingerprints: ["85:ef:ba:0f:29:8b:b3:db:15:0d:34:28:9a:19:f6:d8"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip aws-cli 
            apk add --update openssh 
      # attach workspace
      - attach_workspace:
          # at: .circleci/ansible  
          at: ~/   
      - run:
          name: Configure server
          command: |
            # # add environment variables to server
            echo NODE_ENV=production > ~/project/backend/.env
            echo VERSION: "1" >> ~/project/backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR  >> ~/project/backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ~/project/backend/.env
            cat ~/project/backend/.env

            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: "40m" 
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
      # Here's where you will add some code to rollback on failure      
      # - run: 
      #     name: Install AWS CLI for rollback
      #     when: on_fail
      #     command: |
      #       apk add --update py3-pip && pip3 install --ugrade pip && pip3 install awscli
      #On deployment failure
      - destroy-environment
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:18.4.0 
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      
      # - attach_workspace:
      #     at: ~/
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              #npm audit fix --audit-level=critical --force
              # npm audit fix
              # run and save the migration output
              npm run migrations > migrations_dump.txt 
              cat migrations_dump.txt
            
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/WEmhbY71vVnM6sjoH9rE6w/migration_${CIRCLE_WORKFLOW_Id:0:7} -d '1'
            fi

            
#      # Here's where you will add some code to rollback on failure      
      - destroy-environment
      - revert-migrations
  deploy-frontend:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip 
            apk add --update npm nodejs 
            apk add --update curl aws-cli 
            pip install awscli
      # - restore_cache:
      #     keys: [frontend-build]
      - attach_workspace:
          at: ~/ 
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030">> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

#       # Here's where you will add some code to rollback on failure      
      - destroy-environment
      - revert-migrations            
  deploy-backend:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout 
      - add_ssh_keys:
              fingerprints: ["85:ef:ba:0f:29:8b:b3:db:15:0d:34:28:9a:19:f6:d8"]
      - attach_workspace:
          at: ~/ 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
            apk add --update tar gzip 
            apk add --update curl
            apk add --update npm nodejs
            apk add --update openssh
            # pip install awscli
      # - restore_cache:
      #     keys: [backend-build]
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd .. 
            #Zip of directory
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz ~/ 
            # mkdir -p ~/project/.circleci/ansible/roles/deploy/files
            # mv artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"
            ansible-playbook -i inventory.txt deploy-backend.yml
#       # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
      - image: python:3.9.1-alpine3.12 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip 
            apk add --update npm nodejs 
            apk add --update curl aws-cli
            #pip install awscli
      # - attach_workspace:
      #     at: .circleci/ansible
      - run:
          name: Backend smoke-test
          command: |
            # export BACKEND_IP=$(tail .circleci/ansible/inventory.txt)
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress'\
             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"; then return 0; else return 1; fi             

      - run:
          name: Frontend smoke test.
          command: |
            url="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${url}
            if curl -s ${url} | grep "Welcome"; then return 0; else return 1; fi
            
#       # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout  
      - run:
          name: Install dependencies
          command: |
             apk add --update npm nodejs 
             apk add --update  aws-cli
      - run:
          name: Get and save Old workflowID to textfile
          command: |
              WORKFLOWID=$(aws cloudformation \
               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
               --no-paginate --output text )
               echo $WORKFLOWID > ~/old_workflow.txt
              cat ~/old_workflow.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - old_workflow.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations
cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run: 
          name: Install dependencies
          command: |
              yum install -y tar gzip 
      - attach_workspace:
          at: ~/ 
      - run:
          name: Get old stack workflow id
          command: |
          
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
             --no-paginate --output text)
             
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            #Fetch the stack names 
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
      - run:
          name: Remove old stacks and files
          command: |
            if [ "$OldWorkflowID" != "${CIRCLE_WORKFLOW_ID:0:7}" ]
            then
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm s3://udapeople-${OldWorkflowID} --recursive || true
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" || true
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" || true
              fi
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]